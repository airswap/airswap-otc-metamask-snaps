{"version":3,"file":"curve.mjs","sourceRoot":"","sources":["../../src/curves/curve.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,sBAAkB;AACrC,OAAO,KAAK,YAAY,2BAAuB;AAC/C,OAAO,KAAK,SAAS,wBAAoB;AAIzC,MAAM,CAAC,MAAM,MAAM,GAAG;IACpB,SAAS;IACT,OAAO;IACP,YAAY;CACb,CAAC;AA+BF;;;;;GAKG;AACH,MAAM,UAAU,cAAc,CAAC,SAAyB;IACtD,OAAO,MAAM,CAAC,SAAS,CAAC,CAAC;AAC3B,CAAC;AAED,OAAO,EAAE,GAAG,EAAE,uCAAuC","sourcesContent":["import * as ed25519 from './ed25519';\nimport * as ed25519Bip32 from './ed25519Bip32';\nimport * as secp256k1 from './secp256k1';\n\nexport type SupportedCurve = keyof typeof curves;\n\nexport const curves = {\n  secp256k1,\n  ed25519,\n  ed25519Bip32,\n};\n\ntype CurveSpecification =\n  | {\n      masterNodeGenerationSpec: 'slip10';\n      name: Extract<SupportedCurve, 'secp256k1' | 'ed25519'>;\n    }\n  | {\n      name: Extract<SupportedCurve, 'ed25519Bip32'>;\n      masterNodeGenerationSpec: 'cip3';\n    };\n\nexport type Curve = {\n  secret: Uint8Array;\n  deriveUnhardenedKeys: boolean;\n  publicKeyLength: number;\n  curve: {\n    n: bigint;\n  };\n  getPublicKey: (\n    privateKey: Uint8Array,\n    compressed?: boolean,\n  ) => Uint8Array | Promise<Uint8Array>;\n  isValidPrivateKey: (privateKey: Uint8Array) => boolean;\n  publicAdd: (publicKey: Uint8Array, tweak: Uint8Array) => Uint8Array;\n  compressPublicKey: (publicKey: Uint8Array) => Uint8Array;\n  decompressPublicKey: (publicKey: Uint8Array) => Uint8Array;\n  privateKeyLength: number;\n  compressedPublicKeyLength: number;\n} & CurveSpecification;\n\n/**\n * Get a curve by name.\n *\n * @param curveName - The name of the curve to get.\n * @returns The curve.\n */\nexport function getCurveByName(curveName: SupportedCurve): Curve {\n  return curves[curveName];\n}\n\nexport { mod } from '@noble/curves/abstract/modular';\n"]}