{"version":3,"file":"ed25519.mjs","sourceRoot":"","sources":["../../src/curves/ed25519.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,wBAAwB;AAC7D,OAAO,EAAE,OAAO,EAAE,8BAA8B;AAEhD,MAAM,CAAC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;AACnC,MAAM,CAAC,MAAM,IAAI,GAAG,SAAS,CAAC;AAE9B,gCAAgC;AAChC,wHAAwH;AACxH,MAAM,CAAC,MAAM,MAAM,GAAG,aAAa,CAAC,cAAc,CAAC,CAAC;AAEpD,0CAA0C;AAC1C,wHAAwH;AACxH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,WAAyC,EAAE,EAAE,CAC7E,IAAI,CAAC;AAEP,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,CAAC;AAE1C,MAAM,CAAC,MAAM,eAAe,GAAG,EAAE,CAAC;AAElC,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,UAAsB,EACtB,WAAqB,EACT,EAAE;IACd,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IACnD,OAAO,WAAW,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CACvB,UAAsB,EACtB,MAAkB,EACN,EAAE;IACd,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;AACrE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,SAAqB,EAAc,EAAE;IACrE,oDAAoD;IACpD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,SAAqB,EAAc,EAAE;IACvE,oDAAoD;IACpD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,EAAE,CAAC;AAEnC,MAAM,CAAC,MAAM,wBAAwB,GAAG,QAAQ,CAAC;AAEjD,MAAM,CAAC,MAAM,yBAAyB,GAAG,EAAE,CAAC","sourcesContent":["import { concatBytes, stringToBytes } from '@metamask/utils';\nimport { ed25519 } from '@noble/curves/ed25519';\n\nexport const curve = ed25519.CURVE;\nexport const name = 'ed25519';\n\n// Secret is defined in SLIP-10:\n// https://github.com/satoshilabs/slips/blob/133ea52a8e43d338b98be208907e144277e44c0e/slip-0010.md#master-key-generation\nexport const secret = stringToBytes('ed25519 seed');\n\n// All private keys are valid for ed25519:\n// https://github.com/satoshilabs/slips/blob/133ea52a8e43d338b98be208907e144277e44c0e/slip-0010.md#master-key-generation\nexport const isValidPrivateKey = (_privateKey: Uint8Array | string | bigint) =>\n  true;\n\nexport const deriveUnhardenedKeys = false;\n\nexport const publicKeyLength = 33;\n\nexport const getPublicKey = (\n  privateKey: Uint8Array,\n  _compressed?: boolean,\n): Uint8Array => {\n  const publicKey = ed25519.getPublicKey(privateKey);\n  return concatBytes([new Uint8Array([0]), publicKey]);\n};\n\nexport const publicAdd = (\n  _publicKey: Uint8Array,\n  _tweak: Uint8Array,\n): Uint8Array => {\n  throw new Error('Ed25519 does not support public key derivation.');\n};\n\nexport const compressPublicKey = (publicKey: Uint8Array): Uint8Array => {\n  // Ed25519 public keys don't have a compressed form.\n  return publicKey;\n};\n\nexport const decompressPublicKey = (publicKey: Uint8Array): Uint8Array => {\n  // Ed25519 public keys don't have a compressed form.\n  return publicKey;\n};\n\nexport const privateKeyLength = 32;\n\nexport const masterNodeGenerationSpec = 'slip10';\n\nexport const compressedPublicKeyLength = 33;\n"]}