{"version":3,"file":"bip39.mjs","sourceRoot":"","sources":["../../src/derivers/bip39.ts"],"names":[],"mappings":"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","sourcesContent":["import { mnemonicToEntropy, mnemonicToSeed } from '@metamask/scure-bip39';\nimport { wordlist as englishWordlist } from '@metamask/scure-bip39/dist/wordlists/english';\nimport { assert } from '@metamask/utils';\nimport { hmac } from '@noble/hashes/hmac';\nimport { pbkdf2 } from '@noble/hashes/pbkdf2';\nimport { sha512 } from '@noble/hashes/sha512';\n\nimport type { DeriveChildKeyArgs } from '.';\nimport type { BIP39StringNode } from '../constants';\nimport { BYTES_KEY_LENGTH } from '../constants';\nimport type { Curve } from '../curves';\nimport { SLIP10Node } from '../SLIP10Node';\nimport { getFingerprint } from '../utils';\n\n/**\n * Convert a BIP-39 mnemonic phrase to a multi path.\n *\n * @param mnemonic - The BIP-39 mnemonic phrase to convert.\n * @returns The multi path.\n */\nexport function bip39MnemonicToMultipath(mnemonic: string): BIP39StringNode {\n  return `bip39:${mnemonic.toLowerCase().trim()}`;\n}\n\n/**\n * Create a {@link SLIP10Node} from a BIP-39 mnemonic phrase.\n *\n * @param options - The options for creating the node.\n * @param options.path - The multi path.\n * @param options.curve - The curve to use for derivation.\n * @returns The node.\n */\nexport async function deriveChildKey({\n  path,\n  curve,\n}: DeriveChildKeyArgs): Promise<SLIP10Node> {\n  switch (curve.masterNodeGenerationSpec) {\n    case 'slip10':\n      return createBip39KeyFromSeed(\n        await mnemonicToSeed(path, englishWordlist),\n        curve,\n      );\n    case 'cip3':\n      return entropyToCip3MasterNode(\n        mnemonicToEntropy(path, englishWordlist),\n        curve,\n      );\n    default:\n      throw new Error('Unsupported master node generation spec.');\n  }\n}\n\n/**\n * Create a {@link SLIP10Node} from a BIP-39 seed.\n *\n * @param seed - The cryptographic seed bytes.\n * @param curve - The curve to use.\n * @returns An object containing the corresponding BIP-39 master key and chain\n * code.\n */\nexport async function createBip39KeyFromSeed(\n  seed: Uint8Array,\n  curve: Extract<Curve, { masterNodeGenerationSpec: 'slip10' }>,\n): Promise<SLIP10Node> {\n  assert(\n    seed.length >= 16 && seed.length <= 64,\n    'Invalid seed: The seed must be between 16 and 64 bytes long.',\n  );\n\n  const key = hmac(sha512, curve.secret, seed);\n  const privateKey = key.slice(0, BYTES_KEY_LENGTH);\n  const chainCode = key.slice(BYTES_KEY_LENGTH);\n\n  assert(\n    curve.isValidPrivateKey(privateKey),\n    'Invalid private key: The private key must greater than 0 and less than the curve order.',\n  );\n\n  const masterFingerprint = getFingerprint(\n    await curve.getPublicKey(privateKey, true),\n    curve.compressedPublicKeyLength,\n  );\n\n  return SLIP10Node.fromExtendedKey({\n    privateKey,\n    chainCode,\n    masterFingerprint,\n    depth: 0,\n    parentFingerprint: 0,\n    index: 0,\n    curve: curve.name,\n  });\n}\n\n/**\n * Create a {@link SLIP10Node} from BIP-39 entropy.\n * This function is consistent with the Icarus derivation scheme.\n * Icarus root key derivation scheme: https://github.com/cardano-foundation/CIPs/blob/09d7d8ee1bd64f7e6b20b5a6cae088039dce00cb/CIP-0003/Icarus.md.\n * CIP3: https://github.com/cardano-foundation/CIPs/blob/09d7d8ee1bd64f7e6b20b5a6cae088039dce00cb/CIP-0003/CIP-0003.md#master-key-generation.\n *\n * @param entropy - The entropy value.\n * @param curve - The curve to use.\n * @returns The root key pair consisting of 64-byte private key and 32-byte chain code.\n */\nexport async function entropyToCip3MasterNode(\n  entropy: Uint8Array,\n  curve: Extract<Curve, { masterNodeGenerationSpec: 'cip3' }>,\n): Promise<SLIP10Node> {\n  assert(\n    entropy.length >= 16 && entropy.length <= 64,\n    'Invalid entropy: The entropy must be between 16 and 64 bytes long.',\n  );\n\n  const rootNode = pbkdf2(sha512, curve.secret, entropy, {\n    c: 4096,\n    dkLen: 96,\n  });\n\n  // Consistent with the Icarus derivation scheme.\n  // https://github.com/cardano-foundation/CIPs/blob/09d7d8ee1bd64f7e6b20b5a6cae088039dce00cb/CIP-0003/Icarus.md\n  /* eslint-disable no-bitwise */\n  rootNode[0] &= 0b1111_1000;\n  rootNode[31] &= 0b0001_1111;\n  rootNode[31] |= 0b0100_0000;\n  /* eslint-enable no-bitwise */\n\n  const privateKey = rootNode.slice(0, curve.privateKeyLength);\n  const chainCode = rootNode.slice(curve.privateKeyLength);\n\n  assert(curve.isValidPrivateKey(privateKey), 'Invalid private key.');\n\n  const masterFingerprint = getFingerprint(\n    await curve.getPublicKey(privateKey),\n    curve.compressedPublicKeyLength,\n  );\n\n  return SLIP10Node.fromExtendedKey({\n    privateKey,\n    chainCode,\n    masterFingerprint,\n    depth: 0,\n    parentFingerprint: 0,\n    index: 0,\n    curve: curve.name,\n  });\n}\n"]}