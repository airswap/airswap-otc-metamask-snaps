export declare const curve: Readonly<{
    readonly nBitLength: number;
    readonly nByteLength: number;
    readonly Fp: import("@noble/curves/abstract/modular").IField<bigint>;
    readonly n: bigint;
    readonly h: bigint;
    readonly hEff?: bigint | undefined;
    readonly Gx: bigint;
    readonly Gy: bigint;
    readonly allowInfinityPoint?: boolean | undefined;
    readonly a: bigint;
    readonly b: bigint;
    readonly allowedPrivateKeyLengths?: readonly number[] | undefined;
    readonly wrapPrivateKey?: boolean | undefined;
    readonly endo?: {
        beta: bigint;
        splitScalar: (k: bigint) => {
            k1neg: boolean;
            k1: bigint;
            k2neg: boolean;
            k2: bigint;
        };
    } | undefined;
    readonly isTorsionFree?: ((c: import("@noble/curves/abstract/weierstrass").ProjConstructor<bigint>, point: import("@noble/curves/abstract/weierstrass").ProjPointType<bigint>) => boolean) | undefined;
    readonly clearCofactor?: ((c: import("@noble/curves/abstract/weierstrass").ProjConstructor<bigint>, point: import("@noble/curves/abstract/weierstrass").ProjPointType<bigint>) => import("@noble/curves/abstract/weierstrass").ProjPointType<bigint>) | undefined;
    readonly hash: import("@noble/curves/abstract/utils").CHash;
    readonly hmac: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;
    readonly randomBytes: (bytesLength?: number | undefined) => Uint8Array;
    lowS: boolean;
    readonly bits2int?: ((bytes: Uint8Array) => bigint) | undefined;
    readonly bits2int_modN?: ((bytes: Uint8Array) => bigint) | undefined;
    readonly p: bigint;
}>;
export declare const name = "secp256k1";
export declare const secret: Uint8Array;
export declare const deriveUnhardenedKeys = true;
export declare const publicKeyLength = 65;
export declare const isValidPrivateKey: (privateKey: Uint8Array) => boolean;
export declare const getPublicKey: (privateKey: Uint8Array, compressed?: boolean) => Uint8Array;
export declare const publicAdd: (publicKey: Uint8Array, tweak: Uint8Array) => Uint8Array;
export declare const compressPublicKey: (publicKey: Uint8Array) => Uint8Array;
export declare const decompressPublicKey: (publicKey: Uint8Array) => Uint8Array;
export declare const privateKeyLength = 32;
export declare const masterNodeGenerationSpec = "slip10";
export declare const compressedPublicKeyLength = 33;
//# sourceMappingURL=secp256k1.d.mts.map