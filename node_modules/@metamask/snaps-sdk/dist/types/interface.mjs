import { boolean, nullable, record, string, union } from "@metamask/superstruct";
import { JsonStruct, hasProperty, isObject } from "@metamask/utils";
import { selectiveUnion } from "../internals/index.mjs";
import { RootJSXElementStruct } from "../jsx/index.mjs";
import { ComponentStruct } from "../ui/index.mjs";
import { FileStruct } from "./handlers/index.mjs";
/**
 * To avoid typing problems with the interface state when manipulating it we
 * have to differentiate the state of a form (that will be contained inside the
 * root state) and the root state since a key in the root stat can contain
 * either the value of an input or a sub-state of a form.
 */
export const StateStruct = union([FileStruct, string(), boolean()]);
export const FormStateStruct = record(string(), nullable(StateStruct));
export const InterfaceStateStruct = record(string(), union([FormStateStruct, nullable(StateStruct)]));
export const ComponentOrElementStruct = selectiveUnion((value) => {
    if (isObject(value) && !hasProperty(value, 'props')) {
        return ComponentStruct;
    }
    return RootJSXElementStruct;
});
export const InterfaceContextStruct = record(string(), JsonStruct);
//# sourceMappingURL=interface.mjs.map