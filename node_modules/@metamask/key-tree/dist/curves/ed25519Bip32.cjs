"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compressedPublicKeyLength = exports.masterNodeGenerationSpec = exports.privateKeyLength = exports.decompressPublicKey = exports.compressPublicKey = exports.publicAdd = exports.getPublicKey = exports.multiplyWithBase = exports.bytesToNumberLE = exports.publicKeyLength = exports.deriveUnhardenedKeys = exports.isValidPrivateKey = exports.secret = exports.name = exports.curve = void 0;
const utils_1 = require("@metamask/utils");
const modular_1 = require("@noble/curves/abstract/modular");
const ed25519_1 = require("@noble/curves/ed25519");
exports.curve = ed25519_1.ed25519.CURVE;
/**
 * Named after whitepaper: BIP32-Ed25519 Hierarchical Deterministic Keys over a Non-linear Keyspace
 * https://input-output-hk.github.io/adrestia/static/Ed25519_BIP.pdf
 * "vanilla" "ed25519" curve follows SLIP10: https://tezos.stackexchange.com/questions/2837/can-i-use-bip32-hd-key-pairs-to-derive-ed25519-addresses
 * note that that the important difference of the "bip32" version is that it allows unhardened key derivation
 */
exports.name = 'ed25519Bip32';
// Secret is empty string if not provided by user
exports.secret = (0, utils_1.stringToBytes)('');
/**
 * Get a byte from a private key at a given index.
 *
 * @param privateKey - The private key.
 * @param index - The index of the byte to get.
 * @returns The byte at the given index.
 * @throws If the private key is too short.
 */
function getByte(privateKey, index) {
    const byte = privateKey[index];
    (0, utils_1.assert)(byte !== undefined, 'Private key is too short.');
    return byte;
}
/**
 * Check if a private key is valid.
 *
 * @param privateKey - The private key to check.
 * @returns Whether the private key is valid.
 */
const isValidPrivateKey = (privateKey) => {
    /* eslint-disable no-bitwise */
    // Lowest 3 bits of the first byte must be zero
    if ((getByte(privateKey, 0) & 0b00000111) !== 0) {
        return false;
    }
    // The highest bit of the last byte must be zero
    if ((getByte(privateKey, 31) & 0b10000000) !== 0) {
        return false;
    }
    // The second highest bit of the last byte must be one
    if ((getByte(privateKey, 31) & 0b01000000) !== 0b01000000) {
        return false;
    }
    /* eslint-enable no-bitwise */
    return true;
};
exports.isValidPrivateKey = isValidPrivateKey;
exports.deriveUnhardenedKeys = true;
exports.publicKeyLength = 32;
/**
 * Converts a Uint8Array of bytes to a bigint in little-endian format.
 *
 * @param bytes - The Uint8Array of bytes to convert.
 * @returns The converted bigint value.
 */
const bytesToNumberLE = (bytes) => {
    return (0, utils_1.hexToBigInt)((0, utils_1.bytesToHex)(Uint8Array.from(bytes).reverse()));
};
exports.bytesToNumberLE = bytesToNumberLE;
/**
 * Multiplies the given key with the base point on the Edwards curve.
 * equivalent to https://github.com/jedisct1/libsodium/blob/93a6e79750a31bc0b946bf483b2ba1c77f9e94ce/src/libsodium/crypto_scalarmult/ed25519/ref10/scalarmult_ed25519_ref10.c#L105 .
 * which is used by cardano-js-sdk/crypto https://github.com/input-output-hk/cardano-js-sdk/blob/8a6db2a251cd1c956f52730a0d35de2b7fc67404/packages/crypto/src/Bip32/Bip32PrivateKey.ts#L161 .
 *
 * @param key - The key to multiply with the base point.
 * @returns The resulting point on the Edwards curve.
 */
const multiplyWithBase = (key) => {
    // Little-endian SHA512 with modulo n
    const scalar = (0, modular_1.mod)((0, exports.bytesToNumberLE)(key), exports.curve.n); // The actual scalar
    const point = ed25519_1.ed25519.ExtendedPoint.BASE.multiply(scalar); // Point on Edwards curve aka public key
    return point.toRawBytes(); // Uint8Array representation
};
exports.multiplyWithBase = multiplyWithBase;
/**
 * Calculates the public key corresponding to a given private key.
 *
 * @param privateKey - The private key.
 * @param _compressed - Optional parameter to indicate if the public key should be compressed.
 * @returns The public key.
 */
const getPublicKey = async (privateKey, _compressed) => {
    return (0, exports.multiplyWithBase)(privateKey.slice(0, 32));
};
exports.getPublicKey = getPublicKey;
/**
 * Adds a tweak to a public key.
 *
 * @param publicKey - The public key.
 * @param tweak - The tweak to add.
 * @returns The resulting public key.
 */
const publicAdd = (publicKey, tweak) => {
    return ed25519_1.ed25519.ExtendedPoint.fromHex((0, utils_1.remove0x)((0, utils_1.bytesToHex)(publicKey)))
        .add(ed25519_1.ed25519.ExtendedPoint.fromHex((0, utils_1.remove0x)((0, utils_1.bytesToHex)(tweak))))
        .toRawBytes();
};
exports.publicAdd = publicAdd;
/**
 * Compresses an Ed25519 public key.
 *
 * @param publicKey - The public key to compress.
 * @returns The compressed public key.
 */
const compressPublicKey = (publicKey) => {
    // Ed25519 public keys don't have a compressed form.
    return publicKey;
};
exports.compressPublicKey = compressPublicKey;
/**
 * Decompresses a compressed Ed25519Bip32 public key.
 *
 * @param publicKey - The compressed public key.
 * @returns The decompressed public key.
 */
const decompressPublicKey = (publicKey) => {
    // Ed25519 public keys don't have a compressed form.
    return publicKey;
};
exports.decompressPublicKey = decompressPublicKey;
exports.privateKeyLength = 64;
exports.masterNodeGenerationSpec = 'cip3';
exports.compressedPublicKeyLength = 32;
//# sourceMappingURL=ed25519Bip32.cjs.map