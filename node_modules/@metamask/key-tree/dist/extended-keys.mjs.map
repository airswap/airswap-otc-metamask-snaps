{"version":3,"file":"extended-keys.mjs","sourceRoot":"","sources":["../src/extended-keys.ts"],"names":[],"mappings":"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","sourcesContent":["import { createDataView } from '@metamask/utils';\n\nimport { validateBIP44Depth } from './BIP44Node';\nimport { compressPublicKey, decompressPublicKey } from './curves/secp256k1';\nimport { decodeBase58check, encodeBase58check, isValidBytesKey } from './utils';\n\n// https://github.com/bitcoin/bips/blob/274fa400d630ba757bec0c03b35ebe2345197108/bip-0032.mediawiki#Serialization_format\nexport const PUBLIC_KEY_VERSION = 0x0488b21e;\nexport const PRIVATE_KEY_VERSION = 0x0488ade4;\n\nexport type ExtendedKeyVersion =\n  | typeof PUBLIC_KEY_VERSION\n  | typeof PRIVATE_KEY_VERSION;\n\n/**\n * An extended public or private key. Contains either a public or private key,\n * depending on the version.\n */\ntype ExtendedKeyLike = {\n  version: ExtendedKeyVersion;\n  depth: number;\n  parentFingerprint: number;\n  index: number;\n  chainCode: Uint8Array;\n};\n\ntype ExtendedPublicKey = ExtendedKeyLike & {\n  version: typeof PUBLIC_KEY_VERSION;\n  publicKey: Uint8Array;\n};\n\ntype ExtendedPrivateKey = ExtendedKeyLike & {\n  version: typeof PRIVATE_KEY_VERSION;\n  privateKey: Uint8Array;\n};\n\nexport type ExtendedKey = ExtendedPublicKey | ExtendedPrivateKey;\n\n/**\n * Decodes an extended public or private key. In the case of an extended public key, the public key\n * is returned in the uncompressed form.\n *\n * Throws an error if the extended key is invalid.\n *\n * @param extendedKey - The extended key string to attempt to decode.\n * @returns The decoded extended key.\n */\nexport const decodeExtendedKey = (extendedKey: string): ExtendedKey => {\n  const bytes = decodeBase58check(extendedKey);\n\n  if (bytes.length !== 78) {\n    throw new Error(\n      `Invalid extended key: Expected a length of 78, got ${bytes.length}.`,\n    );\n  }\n\n  const view = createDataView(bytes);\n\n  const version = view.getUint32(0, false);\n  const depth = view.getUint8(4);\n  validateBIP44Depth(depth);\n\n  const parentFingerprint = view.getUint32(5, false);\n  const index = view.getUint32(9, false);\n\n  const chainCode = bytes.slice(13, 45);\n  if (!isValidBytesKey(chainCode, 32)) {\n    throw new Error(\n      `Invalid extended key: Chain code must be a 32-byte non-zero byte array.`,\n    );\n  }\n\n  const key = bytes.slice(45, 78);\n  if (!isValidBytesKey(key, 33)) {\n    throw new Error(\n      `Invalid extended key: Key must be a 33-byte non-zero byte array.`,\n    );\n  }\n\n  const keyView = createDataView(key);\n\n  if (version === PUBLIC_KEY_VERSION) {\n    if (keyView.getUint8(0) !== 0x02 && keyView.getUint8(0) !== 0x03) {\n      throw new Error(\n        `Invalid extended key: Public key must start with 0x02 or 0x03.`,\n      );\n    }\n\n    return {\n      version,\n      depth,\n      parentFingerprint,\n      index,\n      chainCode,\n      publicKey: decompressPublicKey(key),\n    };\n  }\n\n  if (version === PRIVATE_KEY_VERSION) {\n    if (keyView.getUint8(0) !== 0x00) {\n      throw new Error(\n        `Invalid extended key: Private key must start with 0x00.`,\n      );\n    }\n\n    return {\n      version,\n      depth,\n      parentFingerprint,\n      index,\n      chainCode,\n      privateKey: key.slice(1),\n    };\n  }\n\n  throw new Error(\n    `Invalid extended key: Expected a public (xpub) or private key (xprv) version.`,\n  );\n};\n\n/**\n * Encodes an extended public or private key. Assumes that all the inputs are verified beforehand.\n *\n * @param extendedKey - The extended key data to encode.\n * @returns The encoded extended key.\n */\nexport const encodeExtendedKey = (extendedKey: ExtendedKey): string => {\n  const { version, depth, parentFingerprint, index, chainCode } = extendedKey;\n\n  const bytes = new Uint8Array(78);\n\n  const view = createDataView(bytes);\n\n  view.setUint32(0, version, false);\n  view.setUint8(4, depth);\n  view.setUint32(5, parentFingerprint, false);\n  view.setUint32(9, index, false);\n\n  bytes.set(chainCode, 13);\n\n  if (extendedKey.version === PUBLIC_KEY_VERSION) {\n    const { publicKey } = extendedKey;\n    const compressedPublicKey = compressPublicKey(publicKey);\n\n    bytes.set(compressedPublicKey, 45);\n  }\n\n  if (extendedKey.version === PRIVATE_KEY_VERSION) {\n    const { privateKey } = extendedKey;\n    bytes.set(privateKey, 46);\n  }\n\n  return encodeBase58check(bytes);\n};\n"]}