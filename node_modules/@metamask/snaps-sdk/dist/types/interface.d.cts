import type { Infer } from "@metamask/superstruct";
import type { JSXElement } from "../jsx/index.cjs";
import type { Component } from "../ui/index.cjs";
/**
 * To avoid typing problems with the interface state when manipulating it we
 * have to differentiate the state of a form (that will be contained inside the
 * root state) and the root state since a key in the root stat can contain
 * either the value of an input or a sub-state of a form.
 */
export declare const StateStruct: import("@metamask/superstruct").Struct<string | boolean | {
    name: string;
    size: number;
    contentType: string;
    contents: string;
}, null>;
export declare const FormStateStruct: import("@metamask/superstruct").Struct<Record<string, string | boolean | {
    name: string;
    size: number;
    contentType: string;
    contents: string;
} | null>, null>;
export declare const InterfaceStateStruct: import("@metamask/superstruct").Struct<Record<string, string | boolean | {
    name: string;
    size: number;
    contentType: string;
    contents: string;
} | Record<string, string | boolean | {
    name: string;
    size: number;
    contentType: string;
    contents: string;
} | null> | null>, null>;
export type State = Infer<typeof StateStruct>;
export type FormState = Infer<typeof FormStateStruct>;
export type InterfaceState = Infer<typeof InterfaceStateStruct>;
export type ComponentOrElement = Component | JSXElement;
export declare const ComponentOrElementStruct: import("@metamask/superstruct").Struct<{
    type: import("../ui/index.cjs").NodeType.Copyable;
    value: string;
    sensitive?: boolean | undefined;
} | {
    type: import("../ui/index.cjs").NodeType.Divider;
} | {
    type: import("../ui/index.cjs").NodeType.Heading;
    value: string;
} | {
    type: import("../ui/index.cjs").NodeType.Image;
    value: string;
} | import("../ui/index.cjs").Panel | {
    type: import("../ui/index.cjs").NodeType.Spinner;
} | {
    type: import("../ui/index.cjs").NodeType.Text;
    value: string;
    markdown?: boolean | undefined;
} | {
    type: import("../ui/index.cjs").NodeType.Address;
    value: `0x${string}`;
} | {
    type: import("../ui/index.cjs").NodeType.Row;
    value: {
        type: import("../ui/index.cjs").NodeType.Image;
        value: string;
    } | {
        type: import("../ui/index.cjs").NodeType.Text;
        value: string;
        markdown?: boolean | undefined;
    } | {
        type: import("../ui/index.cjs").NodeType.Address;
        value: `0x${string}`;
    };
    label: string;
    variant?: "default" | "warning" | "critical" | undefined;
} | {
    type: import("../ui/index.cjs").NodeType.Input;
    name: string;
    error?: string | undefined;
    inputType?: "number" | "text" | "password" | undefined;
    value?: string | undefined;
    label?: string | undefined;
    placeholder?: string | undefined;
} | {
    type: import("../ui/index.cjs").NodeType.Button;
    value: string;
    variant?: "primary" | "secondary" | undefined;
    name?: string | undefined;
    buttonType?: "button" | "submit" | undefined;
} | {
    type: import("../ui/index.cjs").NodeType.Form;
    name: string;
    children: ({
        type: import("../ui/index.cjs").NodeType.Input;
        name: string;
        error?: string | undefined;
        inputType?: "number" | "text" | "password" | undefined;
        value?: string | undefined;
        label?: string | undefined;
        placeholder?: string | undefined;
    } | {
        type: import("../ui/index.cjs").NodeType.Button;
        value: string;
        variant?: "primary" | "secondary" | undefined;
        name?: string | undefined;
        buttonType?: "button" | "submit" | undefined;
    })[];
} | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").IconProps, "Icon"> | import("../jsx/index.cjs").SnapElement<{
    src: string;
    alt?: string | undefined;
}, "Image"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").ButtonProps, "Button"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").CheckboxProps, "Checkbox"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").FormProps, "Form"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").InputProps, "Input"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").DropdownProps, "Dropdown"> | import("../jsx/index.cjs").SnapElement<{
    name: string;
    value?: string | undefined;
    children: import("../jsx/index.cjs").SnapsChildren<import("../jsx/index.cjs").SnapElement<{
        value: string;
        children: string;
    }, "Radio">>;
}, "RadioGroup"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").FileInputProps, "FileInput"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").CardProps, "Card"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").SelectorProps, "Selector"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").BoldProps, "Bold"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").ItalicProps, "Italic"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").AddressProps, "Address"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").BoxProps, "Box"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").ContainerProps, "Container"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").CopyableProps, "Copyable"> | import("../jsx/index.cjs").SnapElement<Record<string, never>, "Divider"> | import("../jsx/index.cjs").SnapElement<{
    children: import("../jsx/index.cjs").StringElement;
    size?: "md" | "lg" | undefined;
}, "Heading"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").LinkProps, "Link"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").TextProps, "Text"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").RowProps, "Row"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").SectionProps, "Section"> | import("../jsx/index.cjs").SnapElement<Record<string, never>, "Spinner"> | import("../jsx/index.cjs").SnapElement<import("../jsx/index.cjs").TooltipProps, "Tooltip">, null>;
export declare const InterfaceContextStruct: import("@metamask/superstruct").Struct<Record<string, import("@metamask/utils").Json>, null>;
export type InterfaceContext = Infer<typeof InterfaceContextStruct>;
//# sourceMappingURL=interface.d.cts.map