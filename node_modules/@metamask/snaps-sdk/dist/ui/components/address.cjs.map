{"version":3,"file":"address.cjs","sourceRoot":"","sources":["../../../src/ui/components/address.ts"],"names":[],"mappings":";;;AACA,uDAAgE;AAChE,2CAA2D;AAE3D,4CAA2C;AAC3C,wCAAmD;AAEtC,QAAA,aAAa,GAAG,IAAA,oBAAM,EACjC,qBAAa,EACb,IAAA,oBAAM,EAAC;IACL,IAAI,EAAE,IAAA,qBAAO,EAAC,gBAAQ,CAAC,OAAO,CAAC;IAC/B,KAAK,EAAE,gCAAwB;CAChC,CAAC,CACH,CAAC;AAUF;;;;;;;;;;;;GAYG;AACU,QAAA,OAAO,GAAG,IAAA,uBAAa,EAAC,gBAAQ,CAAC,OAAO,EAAE,qBAAa,EAAE;IACpE,OAAO;CACR,CAAC,CAAC","sourcesContent":["import type { Infer } from '@metamask/superstruct';\nimport { assign, literal, object } from '@metamask/superstruct';\nimport { HexChecksumAddressStruct } from '@metamask/utils';\n\nimport { createBuilder } from '../builder';\nimport { LiteralStruct, NodeType } from '../nodes';\n\nexport const AddressStruct = assign(\n  LiteralStruct,\n  object({\n    type: literal(NodeType.Address),\n    value: HexChecksumAddressStruct,\n  }),\n);\n\n/**\n * A address node, that renders an EVM-like address and its icon.\n *\n * @property type - The type of the node. Must be the string `address`.\n * @property value - The address in hexadecimal, including 0x.\n */\nexport type Address = Infer<typeof AddressStruct>;\n\n/**\n * Create an {@link Address} node.\n *\n * @param args - The node arguments. This can either be a string, or an object\n * with the `value` property.\n * @param args.value - The address to be rendered.\n * @returns The address node as an object.\n * @deprecated Snaps component functions are deprecated, in favor of the new JSX\n * components. This function will be removed in a future release.\n * @example\n * const node = address({ value: '0x4bbeeb066ed09b7aed07bf39eee0460dfa261520' });\n * const node = address('0x4bbeeb066ed09b7aed07bf39eee0460dfa261520');\n */\nexport const address = createBuilder(NodeType.Address, AddressStruct, [\n  'value',\n]);\n"]}